language: cpp

# Use container-based infrastructure
sudo: false

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

env:
  global:
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "NvoMZI1lDLmdoKMgAJnNp3RzdRMYGfWL4buwPdIRyjJ522AIceVrT59x0//JB2bdbrABibo/o5TPP1dUGBJlVp9N250R0pjKz8zlehTL++6Y5z0zGWF9WRXOzrvTOCDpUAjJ24zwIREFy02qHmhcEbAy5+IE8aw9s3eZxsngL54="

    - DEPENDENCIES_INSTALL=${TRAVIS_BUILD_DIR}/install-dependencies
    - TUTTLEOFX_BUILD=${TRAVIS_BUILD_DIR}/build-tuttle
    - TUTTLEOFX_INSTALL=${TRAVIS_BUILD_DIR}/install-tuttle
    - TUTTLEOFX_DEPLOY=tuttle-${_system_name}-${_system_version}-${_system_arch}
    - TUTTLEOFX_DEV=${TRAVIS_BUILD_DIR}
    - CI_NODE_TOTAL=2
  matrix:
    - PYTHON_VERSION=2.7
    - PYTHON_VERSION=3.2

matrix:
  allow_failures:
    # we exceed the time limit
    - os: osx
  fast_finish: true

# This results in a 2Ã—2x2 build matrix.
# Where the variables are: os / compiler / python version

cache:
  # Caching Ubuntu packages
  apt: true
  # Caching other directories
  directories:
  - ${DEPENDENCIES_INSTALL}

before_install:
  - env | sort  
  - date -u
  - uname -a
  - if [[ ${TRAVIS_OS_NAME} == "linux" ]]; then
      lsb_release -a;
    elif [[ ${TRAVIS_OS_NAME} == "osx" ]]; then
      sw_vers -productVersion;
    fi

install:
  - tools/travis/coverity_env.sh
  - if [[ ${COVERITY_BUILD_DISABLED} == 1 ]]; then
      exit 0;
    fi
  - tools/travis/install_dependencies.sh

script:
  - if [[ ${COVERITY_BUILD_DISABLED} == 1 ]]; then
      exit 0;
    fi
  - tools/travis/build.sh

  # launch tests
  - if [ ${CC} = "gcc" ]; then tools/travis/launch_tests.sh; fi

after_failure:
  - cat ${TUTTLEOFX_BUILD}/CMakeFiles/CMakeOutput.log

addons:
  apt:
    sources: ['boost-latest', 'kalakris-cmake', 'kubuntu-backports', 'pythonxy-devel']
    packages:
    - cmake
    - swig
    - libboost1.55-all-dev
    - python-dev
    - python-imaging
    - python-numpy
    - python-nose
    - python3-dev
    - python3-setuptools
    - python3-nose
    - python-clint
    - python-argcomplete
    - libfreetype6-dev
    - libbz2-dev
    - libltdl-dev
    - libpng-dev
    - libjpeg-dev
    - libraw-dev
    - libglew-dev
    - libtiff4-dev
    - libilmbase-dev
    - libopenexr-dev
    # - libopenimageio-dev
    - libglew-dev
    - libgraphviz-dev
    - graphviz-dev
    - libopenjpeg-dev
    - libturbojpeg
    - libxmu-dev
    - libmp3lame-dev
    - liblzma-dev
    - libxt-dev
    - libmagickcore-dev
    - liblcms2-dev
    - libyaml-dev
    - libopenctl0.8
    - libcaca-dev
    - libglui-dev
    - libtinyxml-dev
    - yasm
    - libx264-dev
    - libxvidcore-dev
  coverity_scan:
    project:
      name: "tuttleofx/TuttleOFX"
      description: "TuttleOFX Build submitted via Travis CI"
    notification_email: "tuttleofx-team@googlegroups.com"
    build_command: "tools/travis/build.sh"
    branch_pattern: coverity_scan

before_deploy:
  # copy external dependencies of boost-regex
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then cp /usr/lib/{libicuuc.so.48,libicui18n.so.48,libicudata.so.48} ${TUTTLEOFX_INSTALL}/lib; fi
  # copy external dependency of libavformat
  - if [ ${TRAVIS_OS_NAME} = "linux" ]; then cp /lib/x86_64-linux-gnu/{libbz2.so.1,libbz2.so.1.0,libbz2.so.1.0.4} ${TUTTLEOFX_INSTALL}/lib; fi
  # prepare deployment
  - tools/travis/deploy.sh

deploy:
  provider: releases
  api_key:
    secure: ${GITHUB_RELEASE_API_KEY}
  file: ${TUTTLEOFX_DEPLOY}-${CC}-python-${PYTHON_VERSION}.tgz
  skip_cleanup: true
  on:
    tags: true
    all_branches: true
    condition: ${CC} = "gcc"
